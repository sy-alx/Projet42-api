spring.application.name=Projet42-api

# Configuration OAuth2 Spring Security pour Keycloak
spring.security.oauth2.client.provider.keycloak.issuer-uri=http://172.20.10.4:8090/realms/projet42-realm
spring.security.oauth2.client.registration.keycloak.client-id=projet42-api
spring.security.oauth2.client.registration.keycloak.client-secret=UjttrpYWQb78I0wVtlxTc3bHJnDM0zqc
spring.security.oauth2.client.registration.keycloak.scope=openid,profile,email
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code

# Configuration supplémentaire pour le client Keycloak admin
keycloak.realm=projet42-realm
keycloak.auth-server-url=http://localhost:8090
keycloak.resource=projet42-api
keycloak.client.secret=UjttrpYWQb78I0wVtlxTc3bHJnDM0zqc
keycloak.client.id=admin-cli
keycloak.admin.username=admin
keycloak.admin.password=admin
keycloak.admin.client-id=admin-cli
keycloak.admin.client-secret=mItdGE3YNmGpg0TTIXp7qfglA9VQMFuO


# Swagger configuration
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.enabled=true
springdoc.packages-to-scan=com.exemple.Projet42_api.controllers

# PostgreSQL configuration
spring.datasource.url=jdbc:postgresql://localhost:5433/projet42db
spring.datasource.username=postgres
spring.datasource.password=mysecretpassword
spring.datasource.driver-class-name=org.postgresql.Driver

# Ensure data.sql is executed
spring.sql.init.mode=always

# JPA and Hibernate configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# JWT Configuration
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://172.20.10.4:8090/realms/projet42-realm/protocol/openid-connect/certs

# Server port configuration
server.port=8080

logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.web=DEBUG
